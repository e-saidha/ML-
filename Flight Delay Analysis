{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyONskmsfFKANX+0JBCABtWS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/e-saidha/ML-/blob/main/Flight%20Delay%20Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Loading the dataframe**"
      ],
      "metadata": {
        "id": "r7wuu-EBJfnh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n"
      ],
      "metadata": {
        "id": "Bhzn_S5WJOUy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bz4TGPIobKQD",
        "outputId": "419ff438-6984-4c83-cbfc-38b889775f96"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using Colab cache for faster access to the 'airline-delay' dataset.\n",
            "Path to dataset files: /kaggle/input/airline-delay\n"
          ]
        }
      ],
      "source": [
        "import kagglehub\n",
        "\n",
        "# Download latest version\n",
        "path = kagglehub.dataset_download(\"sriharshaeedala/airline-delay\")\n",
        "\n",
        "print(\"Path to dataset files:\", path)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "s = os.listdir(path)\n"
      ],
      "metadata": {
        "id": "9-nUfjb1cpZy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df =pd.read_csv(f'{path}/{s[0]}')"
      ],
      "metadata": {
        "id": "bXZqUUGlc886"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "pT3dram2dKMq",
        "outputId": "8fa477e4-627e-4be6-8433-e330f557c0db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   year  month carrier       carrier_name airport  \\\n",
              "0  2023      8      9E  Endeavor Air Inc.     ABE   \n",
              "1  2023      8      9E  Endeavor Air Inc.     ABY   \n",
              "2  2023      8      9E  Endeavor Air Inc.     AEX   \n",
              "3  2023      8      9E  Endeavor Air Inc.     AGS   \n",
              "4  2023      8      9E  Endeavor Air Inc.     ALB   \n",
              "\n",
              "                                        airport_name  arr_flights  arr_del15  \\\n",
              "0  Allentown/Bethlehem/Easton, PA: Lehigh Valley ...         89.0       13.0   \n",
              "1             Albany, GA: Southwest Georgia Regional         62.0       10.0   \n",
              "2           Alexandria, LA: Alexandria International         62.0       10.0   \n",
              "3        Augusta, GA: Augusta Regional at Bush Field         66.0       12.0   \n",
              "4                   Albany, NY: Albany International         92.0       22.0   \n",
              "\n",
              "   carrier_ct  weather_ct  ...  security_ct  late_aircraft_ct  arr_cancelled  \\\n",
              "0        2.25        1.60  ...          0.0              5.99            2.0   \n",
              "1        1.97        0.04  ...          0.0              7.42            0.0   \n",
              "2        2.73        1.18  ...          0.0              4.28            1.0   \n",
              "3        3.69        2.27  ...          0.0              1.57            1.0   \n",
              "4        7.76        0.00  ...          0.0             11.28            2.0   \n",
              "\n",
              "   arr_diverted  arr_delay  carrier_delay  weather_delay  nas_delay  \\\n",
              "0           1.0     1375.0           71.0          761.0      118.0   \n",
              "1           1.0      799.0          218.0            1.0       62.0   \n",
              "2           0.0      766.0           56.0          188.0       78.0   \n",
              "3           1.0     1397.0          471.0          320.0      388.0   \n",
              "4           0.0     1530.0          628.0            0.0      134.0   \n",
              "\n",
              "   security_delay  late_aircraft_delay  \n",
              "0             0.0                425.0  \n",
              "1             0.0                518.0  \n",
              "2             0.0                444.0  \n",
              "3             0.0                218.0  \n",
              "4             0.0                768.0  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-da6f3410-1538-4c20-93a6-522c1041c827\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>carrier</th>\n",
              "      <th>carrier_name</th>\n",
              "      <th>airport</th>\n",
              "      <th>airport_name</th>\n",
              "      <th>arr_flights</th>\n",
              "      <th>arr_del15</th>\n",
              "      <th>carrier_ct</th>\n",
              "      <th>weather_ct</th>\n",
              "      <th>...</th>\n",
              "      <th>security_ct</th>\n",
              "      <th>late_aircraft_ct</th>\n",
              "      <th>arr_cancelled</th>\n",
              "      <th>arr_diverted</th>\n",
              "      <th>arr_delay</th>\n",
              "      <th>carrier_delay</th>\n",
              "      <th>weather_delay</th>\n",
              "      <th>nas_delay</th>\n",
              "      <th>security_delay</th>\n",
              "      <th>late_aircraft_delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ABE</td>\n",
              "      <td>Allentown/Bethlehem/Easton, PA: Lehigh Valley ...</td>\n",
              "      <td>89.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2.25</td>\n",
              "      <td>1.60</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.99</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1375.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>761.0</td>\n",
              "      <td>118.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>425.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ABY</td>\n",
              "      <td>Albany, GA: Southwest Georgia Regional</td>\n",
              "      <td>62.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1.97</td>\n",
              "      <td>0.04</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.42</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>799.0</td>\n",
              "      <td>218.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>518.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>AEX</td>\n",
              "      <td>Alexandria, LA: Alexandria International</td>\n",
              "      <td>62.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2.73</td>\n",
              "      <td>1.18</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.28</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>766.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>188.0</td>\n",
              "      <td>78.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>444.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>AGS</td>\n",
              "      <td>Augusta, GA: Augusta Regional at Bush Field</td>\n",
              "      <td>66.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>3.69</td>\n",
              "      <td>2.27</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.57</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1397.0</td>\n",
              "      <td>471.0</td>\n",
              "      <td>320.0</td>\n",
              "      <td>388.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>218.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ALB</td>\n",
              "      <td>Albany, NY: Albany International</td>\n",
              "      <td>92.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>7.76</td>\n",
              "      <td>0.00</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.28</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1530.0</td>\n",
              "      <td>628.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>134.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>768.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-da6f3410-1538-4c20-93a6-522c1041c827')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-da6f3410-1538-4c20-93a6-522c1041c827 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-da6f3410-1538-4c20-93a6-522c1041c827');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-3731077b-a804-4a3d-9cef-2e998e2bf32a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3731077b-a804-4a3d-9cef-2e998e2bf32a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-3731077b-a804-4a3d-9cef-2e998e2bf32a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-PQYTQA9dMK9",
        "outputId": "2e82909e-851f-4aa1-df12-c38efc032503"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 171666 entries, 0 to 171665\n",
            "Data columns (total 21 columns):\n",
            " #   Column               Non-Null Count   Dtype  \n",
            "---  ------               --------------   -----  \n",
            " 0   year                 171666 non-null  int64  \n",
            " 1   month                171666 non-null  int64  \n",
            " 2   carrier              171666 non-null  object \n",
            " 3   carrier_name         171666 non-null  object \n",
            " 4   airport              171666 non-null  object \n",
            " 5   airport_name         171666 non-null  object \n",
            " 6   arr_flights          171426 non-null  float64\n",
            " 7   arr_del15            171223 non-null  float64\n",
            " 8   carrier_ct           171426 non-null  float64\n",
            " 9   weather_ct           171426 non-null  float64\n",
            " 10  nas_ct               171426 non-null  float64\n",
            " 11  security_ct          171426 non-null  float64\n",
            " 12  late_aircraft_ct     171426 non-null  float64\n",
            " 13  arr_cancelled        171426 non-null  float64\n",
            " 14  arr_diverted         171426 non-null  float64\n",
            " 15  arr_delay            171426 non-null  float64\n",
            " 16  carrier_delay        171426 non-null  float64\n",
            " 17  weather_delay        171426 non-null  float64\n",
            " 18  nas_delay            171426 non-null  float64\n",
            " 19  security_delay       171426 non-null  float64\n",
            " 20  late_aircraft_delay  171426 non-null  float64\n",
            "dtypes: float64(15), int64(2), object(4)\n",
            "memory usage: 27.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data cleaning"
      ],
      "metadata": {
        "id": "d1-jyBYaJw8D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "(df.isnull().sum()/len(df))*100"
      ],
      "metadata": {
        "id": "vc_jLANIdRfv",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 743
        },
        "outputId": "3c7a7056-5338-4339-90b8-83ed4578247c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "year                   0.000000\n",
              "month                  0.000000\n",
              "carrier                0.000000\n",
              "carrier_name           0.000000\n",
              "airport                0.000000\n",
              "airport_name           0.000000\n",
              "arr_flights            0.139806\n",
              "arr_del15              0.258059\n",
              "carrier_ct             0.139806\n",
              "weather_ct             0.139806\n",
              "nas_ct                 0.139806\n",
              "security_ct            0.139806\n",
              "late_aircraft_ct       0.139806\n",
              "arr_cancelled          0.139806\n",
              "arr_diverted           0.139806\n",
              "arr_delay              0.139806\n",
              "carrier_delay          0.139806\n",
              "weather_delay          0.139806\n",
              "nas_delay              0.139806\n",
              "security_delay         0.139806\n",
              "late_aircraft_delay    0.139806\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>month</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carrier</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carrier_name</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>airport</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>airport_name</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arr_flights</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arr_del15</th>\n",
              "      <td>0.258059</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carrier_ct</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weather_ct</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nas_ct</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>security_ct</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>late_aircraft_ct</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arr_cancelled</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arr_diverted</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>arr_delay</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carrier_delay</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weather_delay</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nas_delay</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>security_delay</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>late_aircraft_delay</th>\n",
              "      <td>0.139806</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "sd8gfiNZJ6z0",
        "outputId": "aead8bcd-dc78-4388-9719-c7b359a95b77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                year          month    arr_flights      arr_del15  \\\n",
              "count  171666.000000  171666.000000  171426.000000  171223.000000   \n",
              "mean     2018.551361       6.493633     362.528467      66.434387   \n",
              "std         2.890006       3.440908     992.894662     179.540694   \n",
              "min      2013.000000       1.000000       1.000000       0.000000   \n",
              "25%      2016.000000       4.000000      50.000000       6.000000   \n",
              "50%      2019.000000       7.000000     100.000000      17.000000   \n",
              "75%      2021.000000       9.000000     250.000000      47.000000   \n",
              "max      2023.000000      12.000000   21977.000000    4176.000000   \n",
              "\n",
              "          carrier_ct     weather_ct         nas_ct    security_ct  \\\n",
              "count  171426.000000  171426.000000  171426.000000  171426.000000   \n",
              "mean       20.796615       2.250347      19.381147       0.157096   \n",
              "std        50.315176       7.314252      61.675244       0.717405   \n",
              "min         0.000000       0.000000       0.000000       0.000000   \n",
              "25%         2.160000       0.000000       1.000000       0.000000   \n",
              "50%         6.400000       0.400000       3.910000       0.000000   \n",
              "75%        17.260000       1.860000      11.710000       0.000000   \n",
              "max      1293.910000     266.420000    1884.420000      58.690000   \n",
              "\n",
              "       late_aircraft_ct  arr_cancelled   arr_diverted     arr_delay  \\\n",
              "count     171426.000000  171426.000000  171426.000000  171426.00000   \n",
              "mean          23.770554       7.530497       0.863387    4239.48733   \n",
              "std           72.393477      43.654880       3.772853   12618.56605   \n",
              "min            0.000000       0.000000       0.000000       0.00000   \n",
              "25%            1.230000       0.000000       0.000000     335.00000   \n",
              "50%            5.000000       1.000000       0.000000    1018.00000   \n",
              "75%           15.260000       4.000000       1.000000    2884.00000   \n",
              "max         2069.070000    4951.000000     197.000000  438783.00000   \n",
              "\n",
              "       carrier_delay  weather_delay      nas_delay  security_delay  \\\n",
              "count  171426.000000  171426.000000  171426.000000   171426.000000   \n",
              "mean     1437.185124     222.563497     920.651704        7.382725   \n",
              "std      4215.677812     821.086511    3423.509335       41.779985   \n",
              "min         0.000000       0.000000       0.000000        0.000000   \n",
              "25%       110.000000       0.000000      34.000000        0.000000   \n",
              "50%       375.000000      18.000000     146.000000        0.000000   \n",
              "75%      1109.000000     146.000000     477.000000        0.000000   \n",
              "max    196944.000000   31960.000000  112018.000000     3760.000000   \n",
              "\n",
              "       late_aircraft_delay  \n",
              "count        171426.000000  \n",
              "mean           1651.700063  \n",
              "std            5221.878385  \n",
              "min               0.000000  \n",
              "25%              65.000000  \n",
              "50%             320.000000  \n",
              "75%            1070.000000  \n",
              "max          227959.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9338192-1881-4d74-96bb-613e633379bd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>arr_flights</th>\n",
              "      <th>arr_del15</th>\n",
              "      <th>carrier_ct</th>\n",
              "      <th>weather_ct</th>\n",
              "      <th>nas_ct</th>\n",
              "      <th>security_ct</th>\n",
              "      <th>late_aircraft_ct</th>\n",
              "      <th>arr_cancelled</th>\n",
              "      <th>arr_diverted</th>\n",
              "      <th>arr_delay</th>\n",
              "      <th>carrier_delay</th>\n",
              "      <th>weather_delay</th>\n",
              "      <th>nas_delay</th>\n",
              "      <th>security_delay</th>\n",
              "      <th>late_aircraft_delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>171666.000000</td>\n",
              "      <td>171666.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171223.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171426.00000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "      <td>171426.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2018.551361</td>\n",
              "      <td>6.493633</td>\n",
              "      <td>362.528467</td>\n",
              "      <td>66.434387</td>\n",
              "      <td>20.796615</td>\n",
              "      <td>2.250347</td>\n",
              "      <td>19.381147</td>\n",
              "      <td>0.157096</td>\n",
              "      <td>23.770554</td>\n",
              "      <td>7.530497</td>\n",
              "      <td>0.863387</td>\n",
              "      <td>4239.48733</td>\n",
              "      <td>1437.185124</td>\n",
              "      <td>222.563497</td>\n",
              "      <td>920.651704</td>\n",
              "      <td>7.382725</td>\n",
              "      <td>1651.700063</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.890006</td>\n",
              "      <td>3.440908</td>\n",
              "      <td>992.894662</td>\n",
              "      <td>179.540694</td>\n",
              "      <td>50.315176</td>\n",
              "      <td>7.314252</td>\n",
              "      <td>61.675244</td>\n",
              "      <td>0.717405</td>\n",
              "      <td>72.393477</td>\n",
              "      <td>43.654880</td>\n",
              "      <td>3.772853</td>\n",
              "      <td>12618.56605</td>\n",
              "      <td>4215.677812</td>\n",
              "      <td>821.086511</td>\n",
              "      <td>3423.509335</td>\n",
              "      <td>41.779985</td>\n",
              "      <td>5221.878385</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2013.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2016.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>2.160000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.230000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>335.00000</td>\n",
              "      <td>110.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>65.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2019.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>6.400000</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>3.910000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1018.00000</td>\n",
              "      <td>375.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>146.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>320.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2021.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>250.000000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>17.260000</td>\n",
              "      <td>1.860000</td>\n",
              "      <td>11.710000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>15.260000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2884.00000</td>\n",
              "      <td>1109.000000</td>\n",
              "      <td>146.000000</td>\n",
              "      <td>477.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1070.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2023.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>21977.000000</td>\n",
              "      <td>4176.000000</td>\n",
              "      <td>1293.910000</td>\n",
              "      <td>266.420000</td>\n",
              "      <td>1884.420000</td>\n",
              "      <td>58.690000</td>\n",
              "      <td>2069.070000</td>\n",
              "      <td>4951.000000</td>\n",
              "      <td>197.000000</td>\n",
              "      <td>438783.00000</td>\n",
              "      <td>196944.000000</td>\n",
              "      <td>31960.000000</td>\n",
              "      <td>112018.000000</td>\n",
              "      <td>3760.000000</td>\n",
              "      <td>227959.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9338192-1881-4d74-96bb-613e633379bd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a9338192-1881-4d74-96bb-613e633379bd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a9338192-1881-4d74-96bb-613e633379bd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1bb8b56e-2e23-46e9-94c3-778bd5b41b78\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1bb8b56e-2e23-46e9-94c3-778bd5b41b78')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1bb8b56e-2e23-46e9-94c3-778bd5b41b78 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60085.41478151551,\n        \"min\": 2.890006450500533,\n        \"max\": 171666.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2018.55136136451,\n          2019.0,\n          171666.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60690.92792390804,\n        \"min\": 1.0,\n        \"max\": 171666.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.493632984982466,\n          7.0,\n          171666.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_flights\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59892.945229895435,\n        \"min\": 1.0,\n        \"max\": 171426.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          362.52846709367304,\n          100.0,\n          171426.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_del15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60326.877247374076,\n        \"min\": 0.0,\n        \"max\": 171223.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          66.4343867354269,\n          17.0,\n          171223.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"carrier_ct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60539.64862079642,\n        \"min\": 0.0,\n        \"max\": 171426.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          20.79661539089753,\n          6.4,\n          171426.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather_ct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60594.26076799236,\n        \"min\": 0.0,\n        \"max\": 171426.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          171426.0,\n          2.2503467385344114,\n          1.86\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nas_ct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60511.66695164304,\n        \"min\": 0.0,\n        \"max\": 171426.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.38114708387292,\n          3.91,\n          171426.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"security_ct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60605.238537171914,\n        \"min\": 0.0,\n        \"max\": 171426.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.15709629811113834,\n          58.69,\n          0.7174045750742909\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"late_aircraft_ct\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60502.05232492203,\n        \"min\": 0.0,\n        \"max\": 171426.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          23.77055405831088,\n          5.0,\n          171426.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_cancelled\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60380.11054226412,\n        \"min\": 0.0,\n        \"max\": 171426.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          171426.0,\n          7.530497124123529,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_diverted\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60598.04770990807,\n        \"min\": 0.0,\n        \"max\": 171426.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          171426.0,\n          0.8633871174734288,\n          197.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"arr_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 156883.0142200189,\n        \"min\": 0.0,\n        \"max\": 438783.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4239.487329809947,\n          1018.0,\n          171426.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"carrier_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84986.57809431494,\n        \"min\": 0.0,\n        \"max\": 196944.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1437.1851236101875,\n          375.0,\n          171426.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59972.30340583045,\n        \"min\": 0.0,\n        \"max\": 171426.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          171426.0,\n          222.56349678578513,\n          146.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"nas_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67132.75488684684,\n        \"min\": 0.0,\n        \"max\": 171426.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          920.6517039422258,\n          146.0,\n          171426.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"security_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60430.11618487647,\n        \"min\": 0.0,\n        \"max\": 171426.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.38272490754028,\n          3760.0,\n          41.77998504847917\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"late_aircraft_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 93047.32402122946,\n        \"min\": 0.0,\n        \"max\": 227959.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1651.700063000945,\n          320.0,\n          171426.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dff.fillna(0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "LA8BeQfAK9SX",
        "outputId": "0f3bbe0f-6fe4-4e6f-f880-4ca4a80d666e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        year  month carrier            carrier_name airport  \\\n",
              "0       2023      8      9E       Endeavor Air Inc.     ABE   \n",
              "1       2023      8      9E       Endeavor Air Inc.     ABY   \n",
              "2       2023      8      9E       Endeavor Air Inc.     AEX   \n",
              "3       2023      8      9E       Endeavor Air Inc.     AGS   \n",
              "4       2023      8      9E       Endeavor Air Inc.     ALB   \n",
              "...      ...    ...     ...                     ...     ...   \n",
              "171661  2013      8      YV      Mesa Airlines Inc.     TRI   \n",
              "171662  2013      8      YV      Mesa Airlines Inc.     YUM   \n",
              "171663  2013      8      YV      Mesa Airlines Inc.     SLC   \n",
              "171664  2013      8      DL    Delta Air Lines Inc.     SBN   \n",
              "171665  2013      8      F9  Frontier Airlines Inc.     MTJ   \n",
              "\n",
              "                                             airport_name  arr_flights  \\\n",
              "0       Allentown/Bethlehem/Easton, PA: Lehigh Valley ...         89.0   \n",
              "1                  Albany, GA: Southwest Georgia Regional         62.0   \n",
              "2                Alexandria, LA: Alexandria International         62.0   \n",
              "3             Augusta, GA: Augusta Regional at Bush Field         66.0   \n",
              "4                        Albany, NY: Albany International         92.0   \n",
              "...                                                   ...          ...   \n",
              "171661     Bristol/Johnson City/Kingsport, TN: Tri Cities          7.0   \n",
              "171662             Yuma, AZ: Yuma MCAS/Yuma International          2.0   \n",
              "171663   Salt Lake City, UT: Salt Lake City International          2.0   \n",
              "171664           South Bend, IN: South Bend International          1.0   \n",
              "171665              Montrose/Delta, CO: Montrose Regional          1.0   \n",
              "\n",
              "        arr_del15  carrier_ct  weather_ct  ...  security_ct  late_aircraft_ct  \\\n",
              "0            13.0        2.25        1.60  ...          0.0              5.99   \n",
              "1            10.0        1.97        0.04  ...          0.0              7.42   \n",
              "2            10.0        2.73        1.18  ...          0.0              4.28   \n",
              "3            12.0        3.69        2.27  ...          0.0              1.57   \n",
              "4            22.0        7.76        0.00  ...          0.0             11.28   \n",
              "...           ...         ...         ...  ...          ...               ...   \n",
              "171661        1.0        0.78        0.00  ...          0.0              0.00   \n",
              "171662        1.0        0.00        0.00  ...          0.0              1.00   \n",
              "171663        0.0        0.00        0.00  ...          0.0              0.00   \n",
              "171664        1.0        1.00        0.00  ...          0.0              0.00   \n",
              "171665        0.0        0.00        0.00  ...          0.0              0.00   \n",
              "\n",
              "        arr_cancelled  arr_diverted  arr_delay  carrier_delay  weather_delay  \\\n",
              "0                 2.0           1.0     1375.0           71.0          761.0   \n",
              "1                 0.0           1.0      799.0          218.0            1.0   \n",
              "2                 1.0           0.0      766.0           56.0          188.0   \n",
              "3                 1.0           1.0     1397.0          471.0          320.0   \n",
              "4                 2.0           0.0     1530.0          628.0            0.0   \n",
              "...               ...           ...        ...            ...            ...   \n",
              "171661            0.0           0.0       23.0           18.0            0.0   \n",
              "171662            0.0           0.0       17.0            0.0            0.0   \n",
              "171663            0.0           0.0        0.0            0.0            0.0   \n",
              "171664            0.0           0.0       18.0           18.0            0.0   \n",
              "171665            0.0           0.0        0.0            0.0            0.0   \n",
              "\n",
              "        nas_delay  security_delay  late_aircraft_delay  \n",
              "0           118.0             0.0                425.0  \n",
              "1            62.0             0.0                518.0  \n",
              "2            78.0             0.0                444.0  \n",
              "3           388.0             0.0                218.0  \n",
              "4           134.0             0.0                768.0  \n",
              "...           ...             ...                  ...  \n",
              "171661        5.0             0.0                  0.0  \n",
              "171662        0.0             0.0                 17.0  \n",
              "171663        0.0             0.0                  0.0  \n",
              "171664        0.0             0.0                  0.0  \n",
              "171665        0.0             0.0                  0.0  \n",
              "\n",
              "[171666 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-001160d0-7c87-4553-85d4-dcfd4d8198fa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>carrier</th>\n",
              "      <th>carrier_name</th>\n",
              "      <th>airport</th>\n",
              "      <th>airport_name</th>\n",
              "      <th>arr_flights</th>\n",
              "      <th>arr_del15</th>\n",
              "      <th>carrier_ct</th>\n",
              "      <th>weather_ct</th>\n",
              "      <th>...</th>\n",
              "      <th>security_ct</th>\n",
              "      <th>late_aircraft_ct</th>\n",
              "      <th>arr_cancelled</th>\n",
              "      <th>arr_diverted</th>\n",
              "      <th>arr_delay</th>\n",
              "      <th>carrier_delay</th>\n",
              "      <th>weather_delay</th>\n",
              "      <th>nas_delay</th>\n",
              "      <th>security_delay</th>\n",
              "      <th>late_aircraft_delay</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ABE</td>\n",
              "      <td>Allentown/Bethlehem/Easton, PA: Lehigh Valley ...</td>\n",
              "      <td>89.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2.25</td>\n",
              "      <td>1.60</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.99</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1375.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>761.0</td>\n",
              "      <td>118.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>425.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ABY</td>\n",
              "      <td>Albany, GA: Southwest Georgia Regional</td>\n",
              "      <td>62.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1.97</td>\n",
              "      <td>0.04</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.42</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>799.0</td>\n",
              "      <td>218.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>518.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>AEX</td>\n",
              "      <td>Alexandria, LA: Alexandria International</td>\n",
              "      <td>62.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2.73</td>\n",
              "      <td>1.18</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.28</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>766.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>188.0</td>\n",
              "      <td>78.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>444.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>AGS</td>\n",
              "      <td>Augusta, GA: Augusta Regional at Bush Field</td>\n",
              "      <td>66.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>3.69</td>\n",
              "      <td>2.27</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.57</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1397.0</td>\n",
              "      <td>471.0</td>\n",
              "      <td>320.0</td>\n",
              "      <td>388.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>218.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2023</td>\n",
              "      <td>8</td>\n",
              "      <td>9E</td>\n",
              "      <td>Endeavor Air Inc.</td>\n",
              "      <td>ALB</td>\n",
              "      <td>Albany, NY: Albany International</td>\n",
              "      <td>92.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>7.76</td>\n",
              "      <td>0.00</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.28</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1530.0</td>\n",
              "      <td>628.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>134.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>768.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171661</th>\n",
              "      <td>2013</td>\n",
              "      <td>8</td>\n",
              "      <td>YV</td>\n",
              "      <td>Mesa Airlines Inc.</td>\n",
              "      <td>TRI</td>\n",
              "      <td>Bristol/Johnson City/Kingsport, TN: Tri Cities</td>\n",
              "      <td>7.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.78</td>\n",
              "      <td>0.00</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171662</th>\n",
              "      <td>2013</td>\n",
              "      <td>8</td>\n",
              "      <td>YV</td>\n",
              "      <td>Mesa Airlines Inc.</td>\n",
              "      <td>YUM</td>\n",
              "      <td>Yuma, AZ: Yuma MCAS/Yuma International</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>17.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171663</th>\n",
              "      <td>2013</td>\n",
              "      <td>8</td>\n",
              "      <td>YV</td>\n",
              "      <td>Mesa Airlines Inc.</td>\n",
              "      <td>SLC</td>\n",
              "      <td>Salt Lake City, UT: Salt Lake City International</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171664</th>\n",
              "      <td>2013</td>\n",
              "      <td>8</td>\n",
              "      <td>DL</td>\n",
              "      <td>Delta Air Lines Inc.</td>\n",
              "      <td>SBN</td>\n",
              "      <td>South Bend, IN: South Bend International</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171665</th>\n",
              "      <td>2013</td>\n",
              "      <td>8</td>\n",
              "      <td>F9</td>\n",
              "      <td>Frontier Airlines Inc.</td>\n",
              "      <td>MTJ</td>\n",
              "      <td>Montrose/Delta, CO: Montrose Regional</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>171666 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-001160d0-7c87-4553-85d4-dcfd4d8198fa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-001160d0-7c87-4553-85d4-dcfd4d8198fa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-001160d0-7c87-4553-85d4-dcfd4d8198fa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4ec59f92-3815-4bdf-9f5f-5fae4a708df8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4ec59f92-3815-4bdf-9f5f-5fae4a708df8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4ec59f92-3815-4bdf-9f5f-5fae4a708df8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZgwJTdYBN5hq",
        "outputId": "cff6a476-77ce-4df6-f3e4-6267a9922f53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 171666 entries, 0 to 171665\n",
            "Data columns (total 21 columns):\n",
            " #   Column               Non-Null Count   Dtype  \n",
            "---  ------               --------------   -----  \n",
            " 0   year                 171666 non-null  int64  \n",
            " 1   month                171666 non-null  int64  \n",
            " 2   carrier              171666 non-null  object \n",
            " 3   carrier_name         171666 non-null  object \n",
            " 4   airport              171666 non-null  object \n",
            " 5   airport_name         171666 non-null  object \n",
            " 6   arr_flights          171666 non-null  float64\n",
            " 7   arr_del15            171666 non-null  float64\n",
            " 8   carrier_ct           171666 non-null  float64\n",
            " 9   weather_ct           171666 non-null  float64\n",
            " 10  nas_ct               171666 non-null  float64\n",
            " 11  security_ct          171666 non-null  float64\n",
            " 12  late_aircraft_ct     171666 non-null  float64\n",
            " 13  arr_cancelled        171666 non-null  float64\n",
            " 14  arr_diverted         171666 non-null  float64\n",
            " 15  arr_delay            171666 non-null  float64\n",
            " 16  carrier_delay        171666 non-null  float64\n",
            " 17  weather_delay        171666 non-null  float64\n",
            " 18  nas_delay            171666 non-null  float64\n",
            " 19  security_delay       171666 non-null  float64\n",
            " 20  late_aircraft_delay  171666 non-null  float64\n",
            "dtypes: float64(15), int64(2), object(4)\n",
            "memory usage: 27.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M-1zhGkwRFiI",
        "outputId": "b53d48ea-bf38-4eb2-fd30-f529c6631d7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 171666 entries, 0 to 171665\n",
            "Data columns (total 22 columns):\n",
            " #   Column               Non-Null Count   Dtype  \n",
            "---  ------               --------------   -----  \n",
            " 0   year                 171666 non-null  int64  \n",
            " 1   month                171666 non-null  int64  \n",
            " 2   carrier              171666 non-null  object \n",
            " 3   carrier_name         171666 non-null  object \n",
            " 4   airport              171666 non-null  object \n",
            " 5   airport_name         171666 non-null  object \n",
            " 6   arr_flights          171666 non-null  float64\n",
            " 7   arr_del15            171666 non-null  float64\n",
            " 8   carrier_ct           171666 non-null  float64\n",
            " 9   weather_ct           171666 non-null  float64\n",
            " 10  nas_ct               171666 non-null  float64\n",
            " 11  security_ct          171666 non-null  float64\n",
            " 12  late_aircraft_ct     171666 non-null  float64\n",
            " 13  arr_cancelled        171666 non-null  float64\n",
            " 14  arr_diverted         171666 non-null  float64\n",
            " 15  arr_delay            171666 non-null  float64\n",
            " 16  carrier_delay        171666 non-null  float64\n",
            " 17  weather_delay        171666 non-null  float64\n",
            " 18  nas_delay            171666 non-null  float64\n",
            " 19  security_delay       171666 non-null  float64\n",
            " 20  late_aircraft_delay  171666 non-null  float64\n",
            " 21  Delayed              171666 non-null  int64  \n",
            "dtypes: float64(15), int64(3), object(4)\n",
            "memory usage: 28.8+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZstNiatBRIsE",
        "outputId": "42690091-1515-4a11-8639-03522f4200ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 171666 entries, 0 to 171665\n",
            "Data columns (total 21 columns):\n",
            " #   Column               Non-Null Count   Dtype  \n",
            "---  ------               --------------   -----  \n",
            " 0   year                 171666 non-null  int64  \n",
            " 1   month                171666 non-null  int64  \n",
            " 2   carrier              171666 non-null  object \n",
            " 3   carrier_name         171666 non-null  object \n",
            " 4   airport              171666 non-null  object \n",
            " 5   airport_name         171666 non-null  object \n",
            " 6   arr_flights          171666 non-null  float64\n",
            " 7   arr_del15            171666 non-null  float64\n",
            " 8   carrier_ct           171666 non-null  float64\n",
            " 9   weather_ct           171666 non-null  float64\n",
            " 10  nas_ct               171666 non-null  float64\n",
            " 11  security_ct          171666 non-null  float64\n",
            " 12  late_aircraft_ct     171666 non-null  float64\n",
            " 13  arr_cancelled        171666 non-null  float64\n",
            " 14  arr_diverted         171666 non-null  float64\n",
            " 15  arr_delay            171666 non-null  float64\n",
            " 16  carrier_delay        171666 non-null  float64\n",
            " 17  weather_delay        171666 non-null  float64\n",
            " 18  nas_delay            171666 non-null  float64\n",
            " 19  security_delay       171666 non-null  float64\n",
            " 20  late_aircraft_delay  171666 non-null  float64\n",
            "dtypes: float64(15), int64(2), object(4)\n",
            "memory usage: 27.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop('Delayed',axis=1)"
      ],
      "metadata": {
        "id": "38FmoSUFRMBW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Delayed_rate'] = df['arr_del15']/df['arr_flights']"
      ],
      "metadata": {
        "id": "QhVru0rESvyh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.Delayed_rate"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "vn7pFLErTaH7",
        "outputId": "31e9c6c6-3231-4247-f852-ffc5ed4d09e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         0.146067\n",
              "1         0.161290\n",
              "2         0.161290\n",
              "3         0.181818\n",
              "4         0.239130\n",
              "            ...   \n",
              "171661    0.142857\n",
              "171662    0.500000\n",
              "171663    0.000000\n",
              "171664    1.000000\n",
              "171665    0.000000\n",
              "Name: Delayed_rate, Length: 171666, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Delayed_rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.146067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.161290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.161290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.181818</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.239130</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171661</th>\n",
              "      <td>0.142857</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171662</th>\n",
              "      <td>0.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171663</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171664</th>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171665</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>171666 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "sns.histplot(df[\"Delayed_rate\"], bins =100, kde =False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "vbdS0AvgU3xt",
        "outputId": "42bf588e-a14f-4d8b-fa2e-2649bbab0355"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Delayed_rate', ylabel='Count'>"
            ]
          },
          "metadata": {},
          "execution_count": 55
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby('carrier')['Delayed_rate'].mean().sort_values(ascending =False).head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "KdqF69cZVi0b",
        "outputId": "ffa89ec1-2724-43af-eae4-721a155de40f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "carrier\n",
              "B6    0.234105\n",
              "F9    0.227021\n",
              "AA    0.209988\n",
              "G4    0.205803\n",
              "WN    0.205420\n",
              "NK    0.203597\n",
              "EV    0.201492\n",
              "UA    0.197995\n",
              "HA    0.194109\n",
              "VX    0.190057\n",
              "Name: Delayed_rate, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Delayed_rate</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>carrier</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>B6</th>\n",
              "      <td>0.234105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>F9</th>\n",
              "      <td>0.227021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AA</th>\n",
              "      <td>0.209988</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>G4</th>\n",
              "      <td>0.205803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WN</th>\n",
              "      <td>0.205420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NK</th>\n",
              "      <td>0.203597</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>EV</th>\n",
              "      <td>0.201492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>UA</th>\n",
              "      <td>0.197995</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HA</th>\n",
              "      <td>0.194109</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VX</th>\n",
              "      <td>0.190057</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "sns.barplot(x='month',y='Delayed_rate',data =df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "nRteX4P4XYdM",
        "outputId": "7a8e8977-37f8-42c5-cb5c-f2c3f803d22b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='month', ylabel='Delayed_rate'>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ds9d3nc5YC6a"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}